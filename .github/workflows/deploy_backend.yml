name: Deploy Backend to k3s

on:
  workflow_dispatch:

env:
  SERVER_IP: shivajshankar1.duckdns.org
  SSH_USER: ubuntu
  WORKING_DIR: /home/ubuntu/githubautomation_be
  BACKEND_IMAGE: diy-auth-backend
  NAMESPACE: auth-app
  FRONTEND_URL: http://shivajshankar1.duckdns.org:3000
  BACKEND_URL: http://shivajshankar1.duckdns.org:8080
  K3S_DIR: /home/ubuntu/githubautomation_be/deploy/k3s

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Create necessary directories on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SERVER_IP }} "
          mkdir -p ${{ env.WORKING_DIR }}/deploy/scripts
        "

    - name: Copy deployment script to server
      run: |
        # Make sure the local script exists
        if [ ! -f "./deploy/scripts/deploy_backend.sh" ]; then
          echo "Error: deploy_backend.sh not found locally"
          exit 1
        fi
        
        # Make the script executable
        chmod +x ./deploy/scripts/deploy_backend.sh
        
        # Copy the script to the server
        scp -o StrictHostKeyChecking=no \
          ./deploy/scripts/deploy_backend.sh \
          ${{ env.SSH_USER }}@${{ env.SERVER_IP }}:${{ env.WORKING_DIR }}/deploy/scripts/

    - name: Sync source code to server
      run: |
        # Create a clean copy of the repository
        mkdir -p /tmp/repo_sync
        cp -r . /tmp/repo_sync/
        
        # Remove unnecessary files to reduce transfer size
        rm -rf /tmp/repo_sync/.git
        rm -rf /tmp/repo_sync/node_modules
        
        # Sync the code to the server
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
          --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          /tmp/repo_sync/ \
          ${{ env.SSH_USER }}@${{ env.SERVER_IP }}:${{ env.WORKING_DIR}}/
        
        # Clean up
        rm -rf /tmp/repo_sync

    - name: Copy backend code to server
      run: |
        # First, copy all Kubernetes resources
        rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.idea' \
          --exclude='*.iml' \
          --include='backendspringboot/' \
          --include='backendspringboot/src/**' \
          --include='backendspringboot/pom.xml' \
          --include='backendspringboot/Dockerfile.runtime' \
          --include='deploy/k3s/' \
          --include='deploy/k3s/namespaces/' \
          --include='deploy/k3s/namespaces/*' \
          --include='deploy/k3s/configs/' \
          --include='deploy/k3s/configs/*' \
          --include='deploy/k3s/secrets/' \
          --include='deploy/k3s/secrets/*' \
          --include='deploy/k3s/deployments/' \
          --include='deploy/k3s/deployments/*' \
          --include='deploy/k3s/services/' \
          --include='deploy/k3s/services/*' \
          --include='deploy/k3s/ingresses/' \
          --include='deploy/k3s/ingresses/*' \
          --include='deploy/scripts/cleanup_k3s_images.sh' \
          --exclude='*' \
          . \
          ${{ env.SSH_USER }}@${{ env.SERVER_IP }}:${{ env.WORKING_DIR}}/

    - name: Set execute permissions on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SERVER_IP }} "
          # Set execute permissions on the deployment script
          chmod +x ${{ env.WORKING_DIR }}/deploy/scripts/deploy_backend.sh
        "

    - name: Clean up Docker environment for backend
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SERVER_IP }} "
          # Remove any existing backend containers and images
          docker ps -a | grep ${{ env.BACKEND_IMAGE }} | awk '{print \$1}' | xargs -r docker rm -f 2>/dev/null || true
          docker images | grep ${{ env.BACKEND_IMAGE }} | awk '{print \$3}' | xargs -r docker rmi -f 2>/dev/null || true
          
          # Clean up any dangling images
          docker system prune -f
        "

    - name: Run backend deployment script
      run: |
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SERVER_IP }} << 'ENDSSH'
          cd ${{ env.WORKING_DIR }}
          
          # Verify the script exists and is executable
          if [ ! -f "./deploy/scripts/deploy_backend.sh" ]; then
            echo "Error: deploy_backend.sh not found on the server"
            ls -la ./deploy/scripts/
            exit 1
          fi
          
          if [ ! -x "./deploy/scripts/deploy_backend.sh" ]; then
            echo "Making script executable..."
            chmod +x ./deploy/scripts/deploy_backend.sh
          fi
          
          # Set environment variables
          export MONGODB_URI='${{ secrets.MONGODB_URI }}'
          export JWT_SECRET='${{ secrets.JWT_SECRET }}'
          export JWT_EXPIRATION_MS='${{ secrets.JWT_EXPIRATION_MS }}'
          export GOOGLE_CLIENT_ID='${{ secrets.GOOGLE_CLIENT_ID }}'
          export GOOGLE_CLIENT_SECRET='${{ secrets.GOOGLE_CLIENT_SECRET }}'
          export FRONTEND_URL='${{ env.FRONTEND_URL }}'
          export BACKEND_URL='${{ env.BACKEND_URL }}'
          
          # Run the script
          ./deploy/scripts/deploy_backend.sh
        ENDSSH

    - name: Verify backend deployment
      run: |
        echo "=== Verifying Backend Deployment ==="
        echo "Backend API: ${{ env.BACKEND_URL }}/api"
        
        # Simple health check
        echo -n "Backend health status: "
        curl -s -o /dev/null -w "%{http_code}" ${{ env.BACKEND_URL }}/actuator/health || echo "unreachable"
        echo -e "\nBackend deployment completed successfully!"
